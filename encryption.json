[
    {
        "question": "''' Fix and complete the code. The code should encrypt every allowed character. Allowed characters are as follows: a-z0-9 and space. The encryption should ignore case sensitivity, meaning an A and an a should be treated the same and considered as 'a'. The encryption process should work as follows: it starts with a shift of 2. For every subsequent character (including non-allowed ones), the shift should increase by 1. If a character is not one of the allowed characters, it should appear unencrypted in the encrypted string. For example, a period '.' should appear as '.' in the encryption. If the shift goes out of bounds, it should wrap around from the beginning. For instance, being 2 over would correspond to the second position in the allowed characters. Remember that even if a character is not encrypted, the shift should still increase by 1. Print the result.'''",
        "code": "alphabet = 'abcdefghijklmnopqrstuvwxyz'\nnumbers = '0123456789'\nall_chars = alphabet + numbers + ' '\nplaintext = 'I go to School. I love School.'\nshiftnumber = 2\nindex = 0\nindex2 = 1\nencrypttxt = \"\"\nfor character1 in plaintext:\n  for character2 in all_chars:\n    index = index + 1\n  if encrypttxt.__len__() != index2:\n    encrypttxt = encrypttxt + character1\n  index = 0\n  index2 = index2 +1\n  shiftnumber = shiftnumber +1\nprint(encrypttxt)",
        "output": "kcktf0wi2nt120.q0s59g1xg28fge."
    },
    {
        "question": "''' Fix and complete the code. You have a key and a plaintext. Each letter in the plaintext should be encrypted. All other characters should remain unencrypted in the encrypted string. For example, if the string already contains the following encrypted characters 'asdwda' and a period and a space are added, the string becomes 'asdwda. '. The following string should be encrypted: 'I play football every Sunday. That's what I like to do.' Here is the key to be applied: 'wduaf'. The encryption follows this logic: based on the index (starting at 0) in the alphabet of the letter from the key, the character in the string to be encrypted should be shifted. If this shift exceeds the alphabet index (26 letters a-z), it wraps around to the beginning (a shift that is 2 over becomes b/B). Case sensitivity should be preserved.\n\nExample: We have 'I' in the plaintext and 'w' in the key. This results in 'E' because we have a shift of 22. 'I' is at the 9th position. This means we go 5 characters over and wrap around to get 'E'. The next character is a space, which is not encrypted and remains as is. Then comes 'p' and 'u', resulting in 'j'. So our encrypted text so far looks like 'E j'. Note: When the end of the key is reached, it starts again from the beginning.'''",
        "code": "txt = \"I play football every Sunday. That's what I like to do.\"\nkey = \"wduaf\"\nencrpyt = \"\"\nindex = 0\nshift = 0\n# smal leter Index is 97-122 and big leter Index = 65-90\nfor char in txt:\n  if char.isalpha():\n    shift = ord(key[index])\n    position = shift + \n    if char.islower():\n      if position > :\n        position = position -\n     else:\n  else:\n  index = index +1\n  if index key.__len__()-1:\n    index = 0\nprint(encrpyt)",
        "output": "E jlfu zotpeulq hpewu Muszds. Pkut'o qhfp C qeny yk xo."
    },
    {
        "question": "'''Fix and complete the code. Encrypt the string 'I play football every Sunday. That's what I like to do.' with the key 'asdopjwpza' by XORing each character. Note that you need to adjust the key to the length of the string. You can enforce rounding up in a division by using // 1 + 1, and the result will be an integer. Example: '(4/3) // 1 + 1'. Store the results as characters. Example: we XOR 'I' with 'a' resulting in '(', then a ' ' with 's' resulting in 'S'. Print the final result.'''",
        "code": "txt = \"I play football every Sunday. That's what I like to do.\"\nkey = \"asdopjwpza\"\ney = key * int()\nencript = \"\"\nindex = 0\n\nprint(encript)",
        "output": "(S\u0014\u0003\u0011\u0013W\u0016\u0015\u000e\u0015\u0011\u0005\u0003\u001cJ\u0012\u0006\u001f\u0013\u0018S7\u001a\u001e\u000e\u0016\tTA5\u001b\u0005\u001bW\u0019W\u0007\u0012\u0000\u0015S-O\u001c\u0003\u001c\u0015Z\u0015\u000eS\u0000\u0000^"
    }
]
